//
//  main.cpp
//  triangle
//
//  Created by Nazirul Hasan on 26/8/23.
//

#include <glad/glad.h>
#include <GLFW/glfw3.h>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtc/type_ptr.hpp>

#include <iostream>

using namespace std;

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void processInput(GLFWwindow* window);

// settings
const unsigned int SCR_WIDTH = 800;
const unsigned int SCR_HEIGHT = 600;
float rotateAngle = 0.0;
float translate_X = 0.0;
float translate_Y = 0.0;
float scale_X = 1.0;
float scale_Y = 1.0;

const char* vertexShaderSource = "#version 330 core\n"
"layout (location = 0) in vec3 aPos;\n"
"uniform mat4 transform;\n"
"void main()\n"
"{\n"
"   gl_Position = transform * vec4(aPos, 1.0);\n"
"}\0";

const char* fragmentShaderSource = "#version 330 core\n"
"out vec4 FragColor;\n"
"uniform vec4 colorInfo;\n"
"void main()\n"
"{\n"
"   FragColor = colorInfo;\n"
"}\n\0";



//const char* fragmentShaderSource = "#version 330 core\n"
//"out vec4 FragColor;\n"
//"void main()\n"
//"{\n"
//"   FragColor = vec4(0.0f, 0.0f, 0.2f, 1.0f);\n"
//"}\n\0";

int main()
{
    // glfw: initialize and configure
    // ------------------------------
    glfwInit();
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

#ifdef __APPLE__
    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);
#endif

    // glfw window creation
    // --------------------
    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, "CSE 4208: Computer Graphics Laboratory", NULL, NULL);
    if (window == NULL)
    {
        std::cout << "Failed to create GLFW window" << std::endl;
        glfwTerminate();
        return -1;
    }
    glfwMakeContextCurrent(window);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    // glad: load all OpenGL function pointers
    // ---------------------------------------
    if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))
    {
        std::cout << "Failed to initialize GLAD" << std::endl;
        return -1;
    }


    // build and compile our shader program
    // ------------------------------------
    // vertex shader
    unsigned int vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, NULL);
    glCompileShader(vertexShader);
    // check for shader compile errors
    int success;
    char infoLog[512];
    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(vertexShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::VERTEX::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // fragment shader
    unsigned int fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, NULL);
    glCompileShader(fragmentShader);
    // check for shader compile errors
    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &success);
    if (!success)
    {
        glGetShaderInfoLog(fragmentShader, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n" << infoLog << std::endl;
    }
    // link shaders
    unsigned int shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);
    // check for linking errors
    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &success);
    if (!success) {
        glGetProgramInfoLog(shaderProgram, 512, NULL, infoLog);
        std::cout << "ERROR::SHADER::PROGRAM::LINKING_FAILED\n" << infoLog << std::endl;
    }
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    // set up vertex data (and buffer(s)) and configure vertex attributes
    // ------------------------------------------------------------------

    //lines, line_strip, line_loop, triangles, triangle_strip
    /*float vertices[] = {
        -0.75f, 0.5f, 0.0f,
        -0.5f, -0.5f, 0.0f,
        -0.25f, 0.5f, 0.0f,
         0.0f, -0.5f, 0.0f,
         0.25f, 0.5f, 0.0f,
         0.5f, -0.5f, 0.0f
    };*/

    //triangle_fan
    /*float vertices[] = {
        0.0f, 0.0f, 0.0f,
        0.5f, 0.0f, 0.0f,
        0.33f, 0.33f, 0.0f,
         0.0f, 0.5f, 0.0f,
        -0.33f, 0.33f, 0.0f,
        -0.5f, 0.0f, 0.0f
        //-0.33f, -0.33f, 0.0f,
        //0.0f, -0.5f, 0.0f,
       // 0.33f, -0.33f, 0.0f
    };*/

    //triangle
    float vertices[] = {
        0.128571007942525,0.39105527379261,0,
0.377155854575969,0.389849909091578,0,
0.391844741665501,0.389682446209449,0,
0.406529948252129,0.387886360792338,0,
0.417818050658442,0.382871675585751,0,
0.426831602270134,0.371368263759559,0,
0.449356280042105,0.338538177856622,0,
0.458384553665412,0.333549256170362,0,
0.469676336574629,0.330163193498759,0,
0.876456559024225,0.330411627444773,0,
0.896795018071269,0.330179755761827,0,
0.910353990769298,0.330025174639862,0,
0.921653134684323,0.329896357038225,0,
0.87720370111372,0.161022002046359,0,
0.86925381484126,0.14319732648269,0,
0.860188736188913,0.131900022819117,0,
0.851131018542373,0.123859964225511,0,
0.842080661901642,0.119077150701871,0,
0.833041346769622,0.119180204783181,0,
0.208198688268765,0.126303818153712,0,
0.194650757079447,0.131344266880626,0,
0.186767119859257,0.142834796946654,0,
0.178883482639067,0.154325327012682,0,
0.101375771985484,0.357163362801893,0,
0.0968892389456095,0.371872492657396,0,
0.0935289397943335,0.384940118217753,0,
0.0901649601401535,0.396379121243126,0,
0.128574688445429,0.392683896327594,0,
0.167624824255986,0.172368992499134,0,
0.878333615505222,0.161009120286195,0,
0.869257495344164,0.144825949017673,0,
0.860192416691817,0.1335286453541,0,
0.851131018542373,0.123859964225511,0,
0.842084342404546,0.120705773236854,0,
0.833041346769622,0.119180204783181,0,
0.209328602660267,0.126290936393548,0,
0.194650757079447,0.131344266880626,0,
0.187900714753663,0.144450537721473,0,
0.178887163141971,0.155953949547666,0,
0.16762850475889,0.173997615034118,0,
0.208798610242103,0.39176929135597,0,
0.237340910261978,0.521737050150532,0,
0.78760553842077,0.513835010415823,0,
0.802290745007397,0.512038924998711,0,
0.815827634688003,0.502112608666848,0,
0.824837505796792,0.488980574305672,0,
0.860630396537383,0.327334727017099,0,
0.470806250966132,0.330150311738595,0,
0.458388234168316,0.335177878705346,0,
0.449359960545008,0.340166800391605,0,
0.42682792176723,0.369739641224576,0,
0.418947965049944,0.382858793825588,0,
0.406533628755033,0.389514983327321,0,
0.391844741665501,0.389682446209449,0,
0.377155854575969,0.389849909091578,0,
0.209928524633605,0.391756409595806,0,
0.237344590764882,0.523365672685515,0,
0.767270759876629,0.515695504633752,0,
0.744948509764374,0.638099829960765,0,
0.739317340321381,0.6463073514365,0,
0.73142266159248,0.652912013897578,0,
0.725784131143679,0.657862290303346,0,
0.715614901620157,0.65797822614482,0,
0.300928958932948,0.659448587054934,0,
0.291889643800928,0.659551641136244,0,
0.285110157451914,0.659628931697226,0,
0.279453224488594,0.656436095428079,0,
0.274926205916776,0.653230377398767,0,
0.271521740730653,0.646754532539326,0,
0.269243509433128,0.638637183384737,0,
0.238478185659288,0.524981413460335,0,
0.300925278430044,0.657819964519951,0,
0.319217377862511,0.752073963386356,0,
0.324889032837446,0.761781289795437,0,
0.333946750483986,0.769821348389043,0,
0.341867192733215,0.774617043672847,0,
0.436780001619421,0.773534975819095,0,
0.44581931675144,0.773431921737786,0,
0.453710314977438,0.765198636741724,0,
0.458204209023121,0.753746751956187,0,
0.468167330384023,0.662427954155655,0,
0.300928958932948,0.659448587054934,0,
0.355429845934148,0.776091085085866,0,
0.37602962068737,0.891491413386725,0,
0.383964784948215,0.902801598810461,0,
0.389625398414439,0.907623057614592,0,
0.394126653465929,0.899428417899021,0,
0.397494313623013,0.889618037408631,0,
0.382544110827303,0.774153300306953,0,
0.356567121331458,0.779335448395668,0,
0.486245960648063,0.662221845993036,0,
0.503518560776144,0.8053474026691,0,
0.505804153079476,0.816721996893655,0,
0.511472127551508,0.824800700767752,0,
0.518251613900523,0.82472341020677,0,
0.5735769335522,0.806177356073933,0,
0.578081869106594,0.799611338893346,0,
0.581449529263678,0.789800958402955,0,
0.593587827840796,0.660998078777484,0,
0.488509469933971,0.663824705007692,0,
0.501207204952484,0.782572450699663,0,
0.581434807252063,0.783286468263023,0,
0.589230112402558,0.732708997357398,0,
0.495447217907854,0.733778183450986,0,
0.502337119343987,0.782559568939499,0,
0.606020566650227,0.662485001950666,0,
0.621029657492399,0.804007699612074,0,
0.625571398075833,0.813727907781319,0,
0.631239372547865,0.821806611655416,0,
0.636888944505377,0.821742202854597,0,
0.689958115876953,0.804850534777071,0,
0.695596646325754,0.799900258371303,0,
0.700083179365628,0.7851911285158,0,
0.709965329662645,0.658042634945638,0,
0.607150481041729,0.662472120190502,0,
0.618710940662932,0.777975502572671,0,
0.700068457354013,0.778676638375867,0,
0.706744889621718,0.732997916835356,0,
0.61295831462411,0.73243848039396,0,
0.617581026271429,0.777988384332835,0,
0.319221058365415,0.75370258592134,0,
0.411874038468616,0.752646281587916,0,
0.418642483308919,0.747683123421984,0,
0.423140057857505,0.73785986117143,0,
0.421910769887597,0.693899934487048,0,
0.417376390309972,0.68743697138777,0,
0.409455948060743,0.682641276103966,0,
0.304373909651014,0.683839279799191,0,
0.319221058365415,0.75370258592134,0,
0.368937291591523,0.753135788474137,0,
0.367649115575152,0.683117901230023,0,
0.265839044247006,0.632161338525296,0,
0.481652693023974,0.629700922334027,0,
0.489562093764492,0.629610750012881,0,
0.495200624213292,0.624660473607113,0,
0.49857196487328,0.616478715651706,0,
0.498435786265835,0.556219681857328,0,
0.49390140668821,0.54975671875805,0,
0.489370707613488,0.544922378193756,0,
0.243049370265953,0.547730601909444,0,
0.265839044247006,0.632161338525296,0,
0.344936732155081,0.632888237848819,0,
0.343608070606767,0.544955502719891,0,
0.435326202972374,0.630229074500739,0,
0.43399754142406,0.542296339371811,0,
0.744922746244047,0.626699472215883,0,
0.647750108574835,0.627807303589962,0,
0.642093175611515,0.624614467320814,0,
0.637566157039698,0.621408749291503,0,
0.635280564736365,0.610034155066948,0,
0.635166469146344,0.559546856482469,0,
0.638537809806332,0.551365098527062,0,
0.644176340255132,0.546414822121294,0,
0.76168007596558,0.541817873994302,0,
0.743796512355448,0.62834097651103,0,
0.696336427409441,0.627253387902922,0,
0.69727495564994,0.542552134323633,0,
0.229354218960478,0.487626149237031,0,
0.824819103282272,0.480837461630756,0,
0.841624279541556,0.417127956363957,0,
0.214521792257694,0.424277333254815,0,
0.229357899463382,0.489254771772014,0,
0.300535145122229,0.485185975811734,0,
0.300387925006072,0.420041074412407,0,
0.390935657448233,0.487412680068604,0,
0.390781076326269,0.41901053359931,0,
0.481325128265526,0.484753516720524,0,
0.481177908149369,0.419608615321197,0,
0.571714599082818,0.482094353372444,0,
0.571571059469566,0.4185780745081,0,
0.662115111408823,0.484321057629314,0,
0.661967891292666,0.419176156229987,0,
0.752508262729019,0.483290516816217,0,
0.753487276501461,0.416504111121743,0,
0.565822113933648,0.374669674864373,0,
0.639273910387115,0.377089605523698,0,
0.630271400284135,0.39347888495484,0,
0.616723469094817,0.398519333681753,0,
0.606557920074199,0.40026389205821,0,
0.594128861767672,0.400405591420011,0,
0.582822356846839,0.397277163951682,0,
0.5737646392003,0.389237105358075,0,
0.566959389330958,0.377914038174175,0,
0.56695202832515,0.374656793104209,0,
0.639273910387115,0.377089605523698,0,
0.646031313718706,0.367240579752817,0,
0.643738360409566,0.352608740458296,0,
0.634684323265931,0.346197304399672,0,
0.571412797844697,0.348547305503823,0,
0.562388204724293,0.355164849725066,0,
0.56695202832515,0.374656793104209,0,
0.584971770542727,0.348392724381859,0,
0.584938646016591,0.33373512156701,0,
0.622258945462308,0.347967626296456,0,
0.622225820936172,0.333310023481608,0,
0.658486135545561,0.378499238135898,0,
0.733060485384723,0.377649041965093,0,
0.722913338878624,0.387536713016466,0,
0.711636277981023,0.397437265828002,0,
0.696951071394395,0.399233351245113,0,
0.682262184304863,0.399400814127242,0,
0.670948318378223,0.393015141588946,0,
0.659619730439967,0.380114978910718,0,
0.65734886014825,0.375254874826096,0,
0.730789615093006,0.372788937880471,0,
0.73643182604471,0.369467284009687,0,
0.737539657418789,0.359682667039624,0,
0.731860641438046,0.346718095560577,0,
0.661805949164894,0.347516764690727,0,
0.653911270435992,0.354121427151805,0,
0.657352540651154,0.376883497361079,0,
0.677624750645928,0.347336420048435,0,
0.678710499002583,0.327780067868473,0,
0.711525862893906,0.348578589778507,0,
0.711489057864866,0.332292364428675,0,
0.259409205673863,0.28695776990968,0,
0.248099020250127,0.282200719906367,0,
0.241286409374977,0.267620407652501,0,
0.242375838234536,0.249692678007522,0,
0.251385709343324,0.236560643646347,0,
0.26494100153845,0.234777439989399,0,
0.274009760693701,0.247703366187955,0,
0.276313755511553,0.267221073087426,0,
0.270693627577272,0.28031446216811,0,
0.259412886176767,0.288586392444663,0,
0.338506893581939,0.287684669233203,0,
0.33058645133271,0.2828889739494,0,
0.323781201463368,0.2715659067655,0,
0.321488248154227,0.256934067470979,0,
0.327104695585604,0.242212055855311,0,
0.338385436986109,0.233940125578758,0,
0.350829217304252,0.24031291635689,0,
0.357638147676498,0.253264606075773,0,
0.357678633208441,0.271179453960588,0,
0.349794995988251,0.282669984026617,0,
0.339640488476345,0.289300410008023,0,
0.42212055855312,0.286731418981089,0,
0.409680458737881,0.28198725073794,0,
0.404008803762946,0.27227992432886,0,
0.402834723336596,0.252749335669225,0,
0.408454851270877,0.239655946588541,0,
0.419739273174286,0.233012638846971,0,
0.432175692486621,0.236128184555137,0,
0.440107176244562,0.24580974744389,0,
0.44240749055951,0.263698831808378,0,
0.436783682122325,0.275163598354078,0,
0.431152512679332,0.283371119829813,0,
0.42212055855312,0.286731418981089,0,
0.503470714238393,0.284175309714319,0,
0.494420357597662,0.279392496190679,0,
0.487604066219608,0.263183561401829,0,
0.486437346799066,0.246910217812161,0,
0.49432466452216,0.237048310281116,0,
0.506746361822879,0.233649365849349,0,
0.51919750314683,0.243279401697447,0,
0.520375264076083,0.264438612892065,0,
0.5136252217503,0.277544883732913,0,
0.503474394741297,0.285803932249302,0,
0.582568402146469,0.284902209037842,0,
0.575781554791646,0.281722254528858,0,
0.568976304922304,0.270399187344958,0,
0.566687032116068,0.25739597058542,0,
0.568913736372938,0.242712604250244,0,
0.577930968487534,0.232837814959035,0,
0.590356346291157,0.231067493062251,0,
0.599421424943504,0.242364796725824,0,
0.602855334152858,0.261869621865131,0,
0.599498715504486,0.276565869960471,0,
0.591604036775585,0.283170532421549,0,
0.583694636035068,0.283260704742695,0,
0.666182067117651,0.283948958785728,0,
0.652612052910909,0.279217672302743,0,
0.646925675924358,0.262995855753729,0,
0.648011424281013,0.243439503573768,0,
0.661544633458716,0.231884564706921,0,
0.676244562056959,0.236602969429742,0,
0.683064533937917,0.254440526753575,0,
0.676325533120845,0.272432665199372,0,
0.668441895900656,0.2839231952654,0,
0.746405988914325,0.283034353814105,0,
0.733958528093278,0.275032940500989,0,
0.729398384995325,0.257169619656829,0,
0.731617728246387,0.239229008251687,0,
0.744024703535491,0.229315573679987,0,
0.758728312636638,0.235662600937791,0,
0.76441468962319,0.251884417486805,0,
0.762191665869224,0.268196406356964,0,
0.756564176929135,0.278032550367682,0,
0.746405988914325,0.283034353814105,0,
0.8288860589911,0.28046536278717,0,
0.81757219306446,0.274079690248875,0,
0.811885816077909,0.257857873699862,0,
0.811841650043062,0.238314403280064,0,
0.825382220226572,0.230016709483183,0,
0.838952234433313,0.234747995966168,0,
0.846898440202869,0.250944048994854,0,
0.843545502057401,0.267268919625177,0,
0.837914332614408,0.275476441100911,0,
0.828889739494004,0.282093985322154,0,
0.186770800362161,0.144463419481637,0,
0.172070871763917,0.139745014758816,0,
0.156252070282883,0.139925359401108,0,
0.139299673907442,0.13848996326858,0,
0.123477191923504,0.137041685375889,0,
0.114426835282773,0.132258871852249,0,
0.10198305496463,0.125886081074117,0,
0.105339673613002,0.111189832978778,0,
0.120017519193822,0.1061365024917,0,
0.142601085012256,0.0993643771484933,0,
0.175361241360019,0.0957335610337795,0,
0.210381226490787,0.0920769813987381,0,
0.24088523455845,0.0901005513393348,0,
0.273652751912021,0.0897269802945872,0,
0.309802651434292,0.0860575188993822,0,
0.342570168787863,0.0856839478546347,0,
0.377593834421535,0.0836559907545764,0,
0.413751094949613,0.0832437744293377,0,
0.445388697911682,0.0828830851447538,0,
0.480416044048258,0.0824837505796789,0,
0.518833133359342,0.0820457707341127,0,
0.557250222670425,0.0816077908885467,0,
0.588887825632494,0.0812471016039628,0,
0.62843482933508,0.080796239998233,0,
0.667981833037666,0.0803453783925032,0,
0.70187926478274,0.0799589255875919,0,
0.738040205813722,0.0811753317973366,0,
0.771937637558796,0.0807888789924253,0,
0.801319092240763,0.082082575763152,0,
0.827318164754032,0.0866721628843362,0,
0.845396795018071,0.0864660547217168,0,
0.865731573562211,0.0846055605037869,0,
0.884954840229369,0.0909010607209366,0,
0.908708805971248,0.102030901502381,0,
0.918892757506385,0.10842945580084,0,
0.924560731978417,0.116508159674937,0,
0.914413585472319,0.12639583072631,0,
0.900858293277193,0.128179034383257,0,
0.883909577404656,0.128372260785713,0,
0.869224370818028,0.130168346202824,0,
0.860185055686009,0.130271400284134,0,
0.852260932933876,0.123847082465347,0,
0.842084342404546,0.120705773236854,0,
0.833041346769622,0.119180204783181,0,
0.208202368771669,0.127932440688695,0,
0.195780671470949,0.131331385120462,0,
0.18789703425076,0.14282191518649,0,

/*-------------------COLORING---------------------*/
0.128571007942525, 0.39105527379261, 0,
0.377155854575969, 0.389849909091578, 0,
0.391844741665501, 0.389682446209449, 0,
0.406529948252129, 0.387886360792338, 0,
0.417818050658442, 0.382871675585751, 0,
0.426831602270134, 0.371368263759559, 0,
0.449356280042105, 0.338538177856622, 0,
0.458384553665412, 0.333549256170362, 0,
0.469676336574629, 0.330163193498759, 0,
0.876456559024225, 0.330411627444773, 0,
0.896795018071269, 0.330179755761827, 0,
0.910353990769298, 0.330025174639862, 0,
0.921653134684323, 0.329896357038225, 0,
0.87720370111372, 0.161022002046359, 0,
0.86925381484126, 0.14319732648269, 0,
0.860188736188913, 0.131900022819117, 0,
0.851131018542373, 0.123859964225511, 0,
0.842080661901642, 0.119077150701871, 0,
0.833041346769622, 0.119180204783181, 0,
0.208198688268765, 0.126303818153712, 0,
0.194650757079447, 0.131344266880626, 0,
0.186767119859257, 0.142834796946654, 0,
0.178883482639067, 0.154325327012682, 0,
0.101375771985484, 0.357163362801893, 0,
0.0968892389456095, 0.371872492657396, 0,
0.0935289397943335, 0.384940118217753, 0,
0.0901649601401535, 0.396379121243126, 0,
0.128574688445429, 0.392683896327594, 0,
0.167624824255986, 0.172368992499134, 0,
0.878333615505222, 0.161009120286195, 0,
0.869257495344164, 0.144825949017673, 0,
0.860192416691817, 0.1335286453541, 0,
0.851131018542373, 0.123859964225511, 0,
0.842084342404546, 0.120705773236854, 0,
0.833041346769622, 0.119180204783181, 0,
0.209328602660267, 0.126290936393548, 0,
0.194650757079447, 0.131344266880626, 0,
0.187900714753663, 0.144450537721473, 0,
0.178887163141971, 0.155953949547666, 0,
0.16762850475889, 0.173997615034118, 0,
0.208798610242103, 0.39176929135597, 0,
0.237340910261978, 0.521737050150532, 0,
0.78760553842077, 0.513835010415823, 0,
0.802290745007397, 0.512038924998711, 0,
0.815827634688003, 0.502112608666848, 0,
0.824837505796792, 0.488980574305672, 0,
0.860630396537383, 0.327334727017099, 0,
0.470806250966132, 0.330150311738595, 0,
0.458388234168316, 0.335177878705346, 0,
0.449359960545008, 0.340166800391605, 0,
0.42682792176723, 0.369739641224576, 0,
0.418947965049944, 0.382858793825588, 0,
0.406533628755033, 0.389514983327321, 0,
0.391844741665501, 0.389682446209449, 0,
0.377155854575969, 0.389849909091578, 0,
0.209928524633605, 0.391756409595806, 0,
0.237344590764882, 0.523365672685515, 0,
0.767270759876629, 0.515695504633752, 0,
0.744948509764374, 0.638099829960765, 0,
0.739317340321381, 0.6463073514365, 0,
0.73142266159248, 0.652912013897578, 0,
0.725784131143679, 0.657862290303346, 0,
0.715614901620157, 0.65797822614482, 0,
0.300928958932948, 0.659448587054934, 0,
0.291889643800928, 0.659551641136244, 0,
0.285110157451914, 0.659628931697226, 0,
0.279453224488594, 0.656436095428079, 0,
0.274926205916776, 0.653230377398767, 0,
0.271521740730653, 0.646754532539326, 0,
0.269243509433128, 0.638637183384737, 0,
0.238478185659288, 0.524981413460335, 0,
0.300925278430044, 0.657819964519951, 0,
0.319217377862511, 0.752073963386356, 0,
0.324889032837446, 0.761781289795437, 0,
0.333946750483986, 0.769821348389043, 0,
0.341867192733215, 0.774617043672847, 0,
0.436780001619421, 0.773534975819095, 0,
0.44581931675144, 0.773431921737786, 0,
0.453710314977438, 0.765198636741724, 0,
0.458204209023121, 0.753746751956187, 0,
0.468167330384023, 0.662427954155655, 0,
0.300928958932948, 0.659448587054934, 0,
0.355429845934148, 0.776091085085866, 0,
0.37602962068737, 0.891491413386725, 0,
0.383964784948215, 0.902801598810461, 0,
0.389625398414439, 0.907623057614592, 0,
0.394126653465929, 0.899428417899021, 0,
0.397494313623013, 0.889618037408631, 0,
0.382544110827303, 0.774153300306953, 0,
0.356567121331458, 0.779335448395668, 0,
0.486245960648063, 0.662221845993036, 0,
0.503518560776144, 0.8053474026691, 0,
0.505804153079476, 0.816721996893655, 0,
0.511472127551508, 0.824800700767752, 0,
0.518251613900523, 0.82472341020677, 0,
0.5735769335522, 0.806177356073933, 0,
0.578081869106594, 0.799611338893346, 0,
0.581449529263678, 0.789800958402955, 0,
0.593587827840796, 0.660998078777484, 0,
0.488509469933971, 0.663824705007692, 0,
0.501207204952484, 0.782572450699663, 0,
0.581434807252063, 0.783286468263023, 0,
0.589230112402558, 0.732708997357398, 0,
0.495447217907854, 0.733778183450986, 0,
0.502337119343987, 0.782559568939499, 0,
0.606020566650227, 0.662485001950666, 0,
0.621029657492399, 0.804007699612074, 0,
0.625571398075833, 0.813727907781319, 0,
0.631239372547865, 0.821806611655416, 0,
0.636888944505377, 0.821742202854597, 0,
0.689958115876953, 0.804850534777071, 0,
0.695596646325754, 0.799900258371303, 0,
0.700083179365628, 0.7851911285158, 0,
0.709965329662645, 0.658042634945638, 0,
0.607150481041729, 0.662472120190502, 0,
0.618710940662932, 0.777975502572671, 0,
0.700068457354013, 0.778676638375867, 0,
0.706744889621718, 0.732997916835356, 0,
0.61295831462411, 0.73243848039396, 0,
0.617581026271429, 0.777988384332835, 0,
0.319221058365415, 0.75370258592134, 0,
0.411874038468616, 0.752646281587916, 0,
0.418642483308919, 0.747683123421984, 0,
0.423140057857505, 0.73785986117143, 0,
0.421910769887597, 0.693899934487048, 0,
0.417376390309972, 0.68743697138777, 0,
0.409455948060743, 0.682641276103966, 0,
0.304373909651014, 0.683839279799191, 0,
0.319221058365415, 0.75370258592134, 0,
0.368937291591523, 0.753135788474137, 0,
0.367649115575152, 0.683117901230023, 0,
0.265839044247006, 0.632161338525296, 0,
0.481652693023974, 0.629700922334027, 0,
0.489562093764492, 0.629610750012881, 0,
0.495200624213292, 0.624660473607113, 0,
0.49857196487328, 0.616478715651706, 0,
0.498435786265835, 0.556219681857328, 0,
0.49390140668821, 0.54975671875805, 0,
0.489370707613488, 0.544922378193756, 0,
0.243049370265953, 0.547730601909444, 0,
0.265839044247006, 0.632161338525296, 0,
0.344936732155081, 0.632888237848819, 0,
0.343608070606767, 0.544955502719891, 0,
0.435326202972374, 0.630229074500739, 0,
0.43399754142406, 0.542296339371811, 0,
0.744922746244047, 0.626699472215883, 0,
0.647750108574835, 0.627807303589962, 0,
0.642093175611515, 0.624614467320814, 0,
0.637566157039698, 0.621408749291503, 0,
0.635280564736365, 0.610034155066948, 0,
0.635166469146344, 0.559546856482469, 0,
0.638537809806332, 0.551365098527062, 0,
0.644176340255132, 0.546414822121294, 0,
0.76168007596558, 0.541817873994302, 0,
0.743796512355448, 0.62834097651103, 0,
0.696336427409441, 0.627253387902922, 0,
0.69727495564994, 0.542552134323633, 0,
0.229354218960478, 0.487626149237031, 0,
0.824819103282272, 0.480837461630756, 0,
0.841624279541556, 0.417127956363957, 0,
0.214521792257694, 0.424277333254815, 0,
0.229357899463382, 0.489254771772014, 0,
0.300535145122229, 0.485185975811734, 0,
0.300387925006072, 0.420041074412407, 0,
0.390935657448233, 0.487412680068604, 0,
0.390781076326269, 0.41901053359931, 0,
0.481325128265526, 0.484753516720524, 0,
0.481177908149369, 0.419608615321197, 0,
0.571714599082818, 0.482094353372444, 0,
0.571571059469566, 0.4185780745081, 0,
0.662115111408823, 0.484321057629314, 0,
0.661967891292666, 0.419176156229987, 0,
0.752508262729019, 0.483290516816217, 0,
0.753487276501461, 0.416504111121743, 0,
0.565822113933648, 0.374669674864373, 0,
0.639273910387115, 0.377089605523698, 0,
0.630271400284135, 0.39347888495484, 0,
0.616723469094817, 0.398519333681753, 0,
0.606557920074199, 0.40026389205821, 0,
0.594128861767672, 0.400405591420011, 0,
0.582822356846839, 0.397277163951682, 0,
0.5737646392003, 0.389237105358075, 0,
0.566959389330958, 0.377914038174175, 0,
0.56695202832515, 0.374656793104209, 0,
0.639273910387115, 0.377089605523698, 0,
0.646031313718706, 0.367240579752817, 0,
0.643738360409566, 0.352608740458296, 0,
0.634684323265931, 0.346197304399672, 0,
0.571412797844697, 0.348547305503823, 0,
0.562388204724293, 0.355164849725066, 0,
0.56695202832515, 0.374656793104209, 0,
0.584971770542727, 0.348392724381859, 0,
0.584938646016591, 0.33373512156701, 0,
0.622258945462308, 0.347967626296456, 0,
0.622225820936172, 0.333310023481608, 0,
0.658486135545561, 0.378499238135898, 0,
0.733060485384723, 0.377649041965093, 0,
0.722913338878624, 0.387536713016466, 0,
0.711636277981023, 0.397437265828002, 0,
0.696951071394395, 0.399233351245113, 0,
0.682262184304863, 0.399400814127242, 0,
0.670948318378223, 0.393015141588946, 0,
0.659619730439967, 0.380114978910718, 0,
0.65734886014825, 0.375254874826096, 0,
0.730789615093006, 0.372788937880471, 0,
0.73643182604471, 0.369467284009687, 0,
0.737539657418789, 0.359682667039624, 0,
0.731860641438046, 0.346718095560577, 0,
0.661805949164894, 0.347516764690727, 0,
0.653911270435992, 0.354121427151805, 0,
0.657352540651154, 0.376883497361079, 0,
0.677624750645928, 0.347336420048435, 0,
0.678710499002583, 0.327780067868473, 0,
0.711525862893906, 0.348578589778507, 0,
0.711489057864866, 0.332292364428675, 0,
0.259409205673863, 0.28695776990968, 0,
0.248099020250127, 0.282200719906367, 0,
0.241286409374977, 0.267620407652501, 0,
0.242375838234536, 0.249692678007522, 0,
0.251385709343324, 0.236560643646347, 0,
0.26494100153845, 0.234777439989399, 0,
0.274009760693701, 0.247703366187955, 0,
0.276313755511553, 0.267221073087426, 0,
0.270693627577272, 0.28031446216811, 0,
0.259412886176767, 0.288586392444663, 0,
0.338506893581939, 0.287684669233203, 0,
0.33058645133271, 0.2828889739494, 0,
0.323781201463368, 0.2715659067655, 0,
0.321488248154227, 0.256934067470979, 0,
0.327104695585604, 0.242212055855311, 0,
0.338385436986109, 0.233940125578758, 0,
0.350829217304252, 0.24031291635689, 0,
0.357638147676498, 0.253264606075773, 0,
0.357678633208441, 0.271179453960588, 0,
0.349794995988251, 0.282669984026617, 0,
0.339640488476345, 0.289300410008023, 0,
0.42212055855312, 0.286731418981089, 0,
0.409680458737881, 0.28198725073794, 0,
0.404008803762946, 0.27227992432886, 0,
0.402834723336596, 0.252749335669225, 0,
0.408454851270877, 0.239655946588541, 0,
0.419739273174286, 0.233012638846971, 0,
0.432175692486621, 0.236128184555137, 0,
0.440107176244562, 0.24580974744389, 0,
0.44240749055951, 0.263698831808378, 0,
0.436783682122325, 0.275163598354078, 0,
0.431152512679332, 0.283371119829813, 0,
0.42212055855312, 0.286731418981089, 0,
0.503470714238393, 0.284175309714319, 0,
0.494420357597662, 0.279392496190679, 0,
0.487604066219608, 0.263183561401829, 0,
0.486437346799066, 0.246910217812161, 0,
0.49432466452216, 0.237048310281116, 0,
0.506746361822879, 0.233649365849349, 0,
0.51919750314683, 0.243279401697447, 0,
0.520375264076083, 0.264438612892065, 0,
0.5136252217503, 0.277544883732913, 0,
0.503474394741297, 0.285803932249302, 0,
0.582568402146469, 0.284902209037842, 0,
0.575781554791646, 0.281722254528858, 0,
0.568976304922304, 0.270399187344958, 0,
0.566687032116068, 0.25739597058542, 0,
0.568913736372938, 0.242712604250244, 0,
0.577930968487534, 0.232837814959035, 0,
0.590356346291157, 0.231067493062251, 0,
0.599421424943504, 0.242364796725824, 0,
0.602855334152858, 0.261869621865131, 0,
0.599498715504486, 0.276565869960471, 0,
0.591604036775585, 0.283170532421549, 0,
0.583694636035068, 0.283260704742695, 0,
0.666182067117651, 0.283948958785728, 0,
0.652612052910909, 0.279217672302743, 0,
0.646925675924358, 0.262995855753729, 0,
0.648011424281013, 0.243439503573768, 0,
0.661544633458716, 0.231884564706921, 0,
0.676244562056959, 0.236602969429742, 0,
0.683064533937917, 0.254440526753575, 0,
0.676325533120845, 0.272432665199372, 0,
0.668441895900656, 0.2839231952654, 0,
0.746405988914325, 0.283034353814105, 0,
0.733958528093278, 0.275032940500989, 0,
0.729398384995325, 0.257169619656829, 0,
0.731617728246387, 0.239229008251687, 0,
0.744024703535491, 0.229315573679987, 0,
0.758728312636638, 0.235662600937791, 0,
0.76441468962319, 0.251884417486805, 0,
0.762191665869224, 0.268196406356964, 0,
0.756564176929135, 0.278032550367682, 0,
0.746405988914325, 0.283034353814105, 0,
0.8288860589911, 0.28046536278717, 0,
0.81757219306446, 0.274079690248875, 0,
0.811885816077909, 0.257857873699862, 0,
0.811841650043062, 0.238314403280064, 0,
0.825382220226572, 0.230016709483183, 0,
0.838952234433313, 0.234747995966168, 0,
0.846898440202869, 0.250944048994854, 0,
0.843545502057401, 0.267268919625177, 0,
0.837914332614408, 0.275476441100911, 0,
0.828889739494004, 0.282093985322154, 0,
0.186770800362161, 0.144463419481637, 0,
0.172070871763917, 0.139745014758816, 0,
0.156252070282883, 0.139925359401108, 0,
0.139299673907442, 0.13848996326858, 0,
0.123477191923504, 0.137041685375889, 0,
0.114426835282773, 0.132258871852249, 0,
0.10198305496463, 0.125886081074117, 0,
0.105339673613002, 0.111189832978778, 0,
0.120017519193822, 0.1061365024917, 0,
0.142601085012256, 0.0993643771484933, 0,
0.175361241360019, 0.0957335610337795, 0,
0.210381226490787, 0.0920769813987381, 0,
0.24088523455845, 0.0901005513393348, 0,
0.273652751912021, 0.0897269802945872, 0,
0.309802651434292, 0.0860575188993822, 0,
0.342570168787863, 0.0856839478546347, 0,
0.377593834421535, 0.0836559907545764, 0,
0.413751094949613, 0.0832437744293377, 0,
0.445388697911682, 0.0828830851447538, 0,
0.480416044048258, 0.0824837505796789, 0,
0.518833133359342, 0.0820457707341127, 0,
0.557250222670425, 0.0816077908885467, 0,
0.588887825632494, 0.0812471016039628, 0,
0.62843482933508, 0.080796239998233, 0,
0.667981833037666, 0.0803453783925032, 0,
0.70187926478274, 0.0799589255875919, 0,
0.738040205813722, 0.0811753317973366, 0,
0.771937637558796, 0.0807888789924253, 0,
0.801319092240763, 0.082082575763152, 0,
0.827318164754032, 0.0866721628843362, 0,
0.845396795018071, 0.0864660547217168, 0,
0.865731573562211, 0.0846055605037869, 0,
0.884954840229369, 0.0909010607209366, 0,
0.908708805971248, 0.102030901502381, 0,
0.918892757506385, 0.10842945580084, 0,
0.924560731978417, 0.116508159674937, 0,
0.914413585472319, 0.12639583072631, 0,
0.900858293277193, 0.128179034383257, 0,
0.883909577404656, 0.128372260785713, 0,
0.869224370818028, 0.130168346202824, 0,
0.860185055686009, 0.130271400284134, 0,
0.852260932933876, 0.123847082465347, 0,
0.842084342404546, 0.120705773236854, 0,
0.833041346769622, 0.119180204783181, 0,
0.208202368771669, 0.127932440688695, 0,
0.195780671470949, 0.131331385120462, 0,
0.18789703425076, 0.14282191518649, 0


    };

    unsigned int VBO, VAO;
    glGenVertexArrays(1, &VAO);
    glGenBuffers(1, &VBO);
    // bind the Vertex Array Object first, then bind and set vertex buffer(s), and then configure vertex attributes(s).
    glBindVertexArray(VAO);

    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 3 * sizeof(float), (void*)0);
    glEnableVertexAttribArray(0);

    // note that this is allowed, the call to glVertexAttribPointer registered VBO as the vertex attribute's bound vertex buffer object so afterwards we can safely unbind
    glBindBuffer(GL_ARRAY_BUFFER, 0);

    // You can unbind the VAO afterwards so other VAO calls won't accidentally modify this VAO, but this rarely happens. Modifying other
    // VAOs requires a call to glBindVertexArray anyways so we generally don't unbind VAOs (nor VBOs) when it's not directly necessary.
    glBindVertexArray(0);


    // uncomment this call to draw in wireframe polygons.
    //glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);

    // render loop
    // -----------
    while (!glfwWindowShouldClose(window))
    {
        // input
        // -----
        processInput(window);

        // render
        // ------
        glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        //glClearColor(1.0f, 1.0f, 1.0f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // create transformations
        /*glm::mat4 trans = glm::mat4(1.0f); // make sure to initialize matrix to identity matrix first
        trans = glm::translate(trans, glm::vec3(translate_X, translate_Y, 0.0f));
        trans = glm::rotate(trans, glm:: radians(rotateAngle), glm::vec3(0.0f, 0.0f, 1.0f));
        trans = glm::scale(trans,glm::vec3(scale_X, scale_Y, 1.0));*/
        glm::mat4 translationMatrix;
        glm::mat4 rotationMatrix;
        glm::mat4 scaleMatrix;
        glm::mat4 modelMatrix;// 
        glm::mat4 identityMatrix = glm::mat4(1.0f);
        translationMatrix = glm::translate(identityMatrix, glm::vec3(-0.5, -0.5, 0.0f));
        rotationMatrix = glm::rotate(identityMatrix, glm::radians(0.0f), glm::vec3(0.0f, 0.0f, 1.0f));
        scaleMatrix = glm::scale(identityMatrix, glm::vec3(1.2, 1.2, 1.0f));
        modelMatrix = translationMatrix * rotationMatrix * scaleMatrix;
        //modelMatrix = rotationMatrix * scaleMatrix;

        // get matrix's uniform location and set matrix
        glUseProgram(shaderProgram);
        unsigned int transformLoc = glGetUniformLocation(shaderProgram, "transform");
        glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(modelMatrix));

        /*seperate cooloring*/

        int colorLocation = glGetUniformLocation(shaderProgram, "colorInfo");

        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(0.0f, 0.0f, 0.0f, 1.0f)));

        // draw our first triangle
        glBindVertexArray(VAO); // seeing as we only have a single VAO there's no need to bind it every time, but we'll do so to keep things a bit more organized

        //coloring

        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(0.6f, 0.8f, 1.0f, 1.0f)));
        glDrawArrays(GL_TRIANGLE_FAN, 646, 45); // water


        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(1.0f, 1.0f, 1.0f, 1.0f)));
        glDrawArrays(GL_TRIANGLE_FAN, 347, 27); //base
        // glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(1.0f, 0.0f, 0.0f, 1.0f)));
         //glDrawArrays(GL_TRIANGLE_FAN, 376, 12); //red bottom
        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(1.0f, 1.0f, 1.0f, 1.0f)));
        glDrawArrays(GL_TRIANGLE_FAN, 387, 16); //1st floor
        glDrawArrays(GL_TRIANGLE_FAN, 403, 15); //2nd floor
        glDrawArrays(GL_TRIANGLE_FAN, 418, 11); //3rd floor
        glDrawArrays(GL_TRIANGLE_FAN, 429, 7); //uporer lomba part
        glDrawArrays(GL_TRIANGLE_FAN, 437, 9); //uporer 1no box
        glDrawArrays(GL_TRIANGLE_FAN, 452, 10); //uporer 2no box

        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(1.0f, 0.2f, 0.2f, 1.0f)));
        glDrawArrays(GL_TRIANGLE_FAN, 447, 4); // red1
        glDrawArrays(GL_TRIANGLE_FAN, 462, 4); // red2


        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(0.0f, 0.4f, 0.8f, 1.0f)));
        glDrawArrays(GL_TRIANGLE_FAN, 467, 10); // box of 3rd floor
        glDrawArrays(GL_TRIANGLE_FAN, 479, 10); // 1st box of 2nd floor
        glDrawArrays(GL_TRIANGLE_FAN, 493, 8); // 2nd box of 2nd floor

        glDrawArrays(GL_TRIANGLE_FAN, 504, 12); // box of 1st floor

        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(1.0f, 0.4f, 0.0f, 1.0f)));
        glDrawArrays(GL_TRIANGLE_FAN, 523, 8);
        glDrawArrays(GL_TRIANGLE_FAN, 544, 7);

        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(0.0f, 0.4f, 0.8f, 1.0f)));
        glDrawArrays(GL_TRIANGLE_FAN, 562, 8); //1st circle
        glDrawArrays(GL_TRIANGLE_FAN, 572, 10); //2nd
        glDrawArrays(GL_TRIANGLE_FAN, 583, 10); //3rd
        glDrawArrays(GL_TRIANGLE_FAN, 594, 9); //4tt
        glDrawArrays(GL_TRIANGLE_FAN, 604, 12); //5th
        glDrawArrays(GL_TRIANGLE_FAN, 616, 8); //6th
        glDrawArrays(GL_TRIANGLE_FAN, 625, 10); //7th
        glDrawArrays(GL_TRIANGLE_FAN, 636, 9); //8th



        /*-----border------*/

        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(0.0f, 0.0f, 0.0f, 1.0f)));
        glLineWidth(3.0f);
        glDrawArrays(GL_LINE_STRIP, 0, 28); // base
        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(1.0f, 0.0f, 0.0f, 1.0f)));
        //glLineWidth(6.0f);
        glDrawArrays(GL_TRIANGLE_FAN, 28, 12); //red bottom
        glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(0.0f, 0.0f, 0.0f, 1.0f)));
        glLineWidth(3.0f);
        glDrawArrays(GL_LINE_STRIP, 40, 16);  // 1st floor
        glDrawArrays(GL_LINE_STRIP, 56, 15); // 2nd floor
        glDrawArrays(GL_LINE_STRIP, 71, 11); // 3rd floor

        glDrawArrays(GL_LINE_STRIP, 82, 8); // uporer lomba part
        glDrawArrays(GL_LINE_STRIP, 90, 9); // uporer 1 no box
        glDrawArrays(GL_LINE_STRIP, 100, 5); // red1

        glDrawArrays(GL_LINE_STRIP, 105, 10); // uporer 2 no box
        glDrawArrays(GL_LINE_STRIP, 115, 5); // red2

        glDrawArrays(GL_LINE_STRIP, 120, 9); // box of 3rd floor
        glDrawArrays(GL_LINE_STRIP, 129, 2); // partition1

        glDrawArrays(GL_LINE_STRIP, 131, 10); // 1st box of 2nd floor
        glDrawArrays(GL_LINE_STRIP, 141, 2); // partition1
        glDrawArrays(GL_LINE_STRIP, 143, 2); // partition2
        glDrawArrays(GL_LINE_STRIP, 145, 10); // 2nd box of 2nd floor
        glDrawArrays(GL_LINE_STRIP, 155, 2); // partition1

        glDrawArrays(GL_LINE_STRIP, 157, 5); // box of 1st floor
        glDrawArrays(GL_LINE_STRIP, 162, 2); // partition1
        glDrawArrays(GL_LINE_STRIP, 164, 2); // partition2
        glDrawArrays(GL_LINE_STRIP, 166, 2); // partition3
        glDrawArrays(GL_LINE_STRIP, 168, 2); // partition4
        glDrawArrays(GL_LINE_STRIP, 170, 2); // partition5
        glDrawArrays(GL_LINE_STRIP, 172, 2); // partition6

        glDrawArrays(GL_LINE_STRIP, 174, 10); //  upper part
        glDrawArrays(GL_LINE_STRIP, 182, 9); // lower part
        glLineWidth(6.0f);
        glDrawArrays(GL_LINE_STRIP, 191, 2); // beam1
        glDrawArrays(GL_LINE_STRIP, 193, 2); // beam2

        glLineWidth(3.0f);
        glDrawArrays(GL_LINE_STRIP, 195, 8); // upper part
        glDrawArrays(GL_LINE_STRIP, 203, 8); // lower part
        glLineWidth(6.0f);
        glDrawArrays(GL_LINE_STRIP, 211, 2); // beam1
        glDrawArrays(GL_LINE_STRIP, 213, 2); // beam2

        glLineWidth(3.0f);
        glDrawArrays(GL_LINE_LOOP, 215, 9); // 1st circle
        glDrawArrays(GL_LINE_LOOP, 225, 11); // 2nd circle
        glDrawArrays(GL_LINE_LOOP, 236, 9); // 3rd circle
        glDrawArrays(GL_LINE_LOOP, 248, 9); // 4th circle
        glDrawArrays(GL_LINE_LOOP, 258, 12); // 5th circle
        glDrawArrays(GL_LINE_LOOP, 271, 8); // 6th circle
        glDrawArrays(GL_LINE_LOOP, 279, 10); // 7th circle
        glDrawArrays(GL_LINE_LOOP, 289, 9); // 8th circle

        glLineWidth(1.0f);
        glDrawArrays(GL_LINE_STRIP, 299, 47); // water






        //glUniform4fv(colorLocation, 1, glm::value_ptr(glm::vec4(0.0f, 0.0f, 0.0f, 1.0f)));
        //glDrawArrays(GL_LINE_STRIP, 478, 2); // partition1
        //glLineWidth(3.0f);
        //glDrawArrays(GL_LINE_STRIP, 129, 2); // partition1


        //glDrawArrays(GL_LINES, 0, 380);
        // //glDrawArrays(GL_LINE_LOOP, 0, 6);
       //glDrawArrays(GL_TRIANGLES, 0, 6);
       //glDrawArrays(GL_TRIANGLE_STRIP, 0, 6);// adjacent niye tri banay
       //glDrawArrays(GL_TRIANGLE_FAN, 0, 6);
       //glDrawArrays(GL_TRIANGLES, 0, 3);// triangle draw hoy
       // glBindVertexArray(0); // no need to unbind it every time

       // glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)
       // -------------------------------------------------------------------------------
        glfwSwapBuffers(window);// 2 ta buffer; front r back; swap kora mane back ta front hoye jay and vice-versa
        glfwPollEvents();// mouse theke input nile; ekhane er kaj nei
    }

    // optional: de-allocate all resources once they've outlived their purpose:
    // ------------------------------------------------------------------------
    glDeleteVertexArrays(1, &VAO);
    glDeleteBuffers(1, &VBO);
    glDeleteProgram(shaderProgram);

    // glfw: terminate, clearing all previously allocated GLFW resources.
    // ------------------------------------------------------------------
    glfwTerminate();
    return 0;
}

// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly
// ---------------------------------------------------------------------------------------------------------
void processInput(GLFWwindow* window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
        glfwSetWindowShouldClose(window, true);
    if (glfwGetKey(window, GLFW_KEY_R) == GLFW_PRESS)
    {
        rotateAngle += 1;
    }
    if (glfwGetKey(window, GLFW_KEY_T) == GLFW_PRESS)
    {
        rotateAngle -= 1;
    }
    if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
    {
        translate_Y += 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
    {
        translate_Y -= 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
    {
        translate_X += 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
    {
        translate_X -= 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_X) == GLFW_PRESS)
    {
        scale_X += 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_C) == GLFW_PRESS)
    {
        scale_X -= 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_Y) == GLFW_PRESS)
    {
        scale_Y += 0.01;
    }
    if (glfwGetKey(window, GLFW_KEY_U) == GLFW_PRESS)
    {
        scale_Y -= 0.01;
    }
}

// glfw: whenever the window size changed (by OS or user resize) this callback function executes
// ---------------------------------------------------------------------------------------------
void framebuffer_size_callback(GLFWwindow* window, int width, int height)
{
    // make sure the viewport matches the new window dimensions; note that width and
    // height will be significantly larger than specified on retina displays.
    glViewport(0, 0, width, height);
}
